{
  "name": "failure",
  "version": "1.1.1",
  "description": "Easily generate \"custom\" error objects with addition properties which can be stringfied with JSON.stringify",
  "main": "index.js",
  "scripts": {
    "100%": "istanbul check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "test": "mocha test.js",
    "watch": "mocha --watch test.js",
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/unshiftio/failure"
  },
  "keywords": [
    "failure",
    "error",
    "errs",
    "err",
    "errors",
    "fail",
    "throw",
    "custom"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/unshiftio/failure/issues"
  },
  "homepage": "https://github.com/unshiftio/failure",
  "devDependencies": {
    "assume": "1.2.x",
    "istanbul": "0.3.x",
    "mocha": "2.2.x",
    "pre-commit": "1.0.x"
  },
  "readme": "# failure\n\n[![Made by unshift][made-by]](http://unshift.io)[![Version npm][version]](http://browsenpm.org/package/failure)[![Build Status][build]](https://travis-ci.org/unshiftio/failure)[![Dependencies][david]](https://david-dm.org/unshiftio/failure)[![Coverage Status][cover]](https://coveralls.io/r/unshiftio/failure?branch=master)[![IRC channel][irc]](http://webchat.freenode.net/?channels=unshift)\n\n[made-by]: https://img.shields.io/badge/made%20by-unshift-00ffcc.svg?style=flat-square\n[version]: https://img.shields.io/npm/v/failure.svg?style=flat-square\n[build]: https://img.shields.io/travis/unshiftio/failure/master.svg?style=flat-square\n[david]: https://img.shields.io/david/unshiftio/failure.svg?style=flat-square\n[cover]: https://img.shields.io/coveralls/unshiftio/failure/master.svg?style=flat-square\n[irc]: https://img.shields.io/badge/IRC-irc.freenode.net%23unshift-00a8ff.svg?style=flat-square\n\nFailure is a small helper library which allows you to easily generate custom\nerror objects which can hold addition properties which could be helpful for\ndebugging your application. In addition to that, it automatically adds a missing\n`toJSON` function to the Error object so you can actually get the message and\nstack trace once you `JSON.stringify` the error instance.\n\n## Installation\n\nThe module is written with browsers and servers in mind and should run in any\nenvironment that runs ES3. The module it self is released in the public npm\nregistry and can be installed using:\n\n```\nnpm install --save failure\n```\n\nThe `--save` flag tells npm to automatically add the installed version to your\n`package.json` file as new dependency.\n\n## Usage\n\nFirst of all, start with including this module in your code:\n\n```js\n'use strict';\n\nvar failure = require('failure');\n```\n\nNow every time you want to pass or create a `new Error` instance, you can use\nthe `failure` function to generate the error for you. The failure method accepts\n2 arguments:\n\n1. An `Error` instance that just needs extra props, or a `string` that should be\n   transformed to an `Error`. Please do note that when using a string you will\n   have an extra trace in your stack trace as the stack trace will be made inside\n   the `failure` function instead of where you called the `failure` function.\n2. An object with extra properties that should be introduced on the supplied or\n   generated `Error` instance. These properties will not override existing\n   properties on the `Error` instance.\n\nBefore the function returns the generated `Error` instance it checks if it also\nneeds to add the missing `.toJSON` method.\n\nBelow is a small usage example on how you could use this to provide extra\ninformation when things start failing when you make an HTTP request somewhere.\nIf request something with an incorrect status code, you might want to know what\nstatusCode was received, so we can easily add that to the Error object. Same as\nparse errors for JSON, you probably want to know what you received and failed.\n\n```js\nrequest('https://googlllll.com', function (err, res, body) {\n  if (err) return next(err);\n  if (res.statusCode !== 200) return next(failure('Invalid statusCode'), {\n    statusCode: res.statusCode\n  });\n\n  try { body = JSON.parse(body); }\n  catch (e) {\n    return next(failure(e, { \n      body: body \n    }));\n  }\n\n  next(undefined, body);\n})\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "failure@1.1.1",
  "dist": {
    "shasum": "48eebd753d3a64f08d852d74b7f8b44cf3c04045"
  },
  "_from": "failure@1.1.x",
  "_resolved": "https://registry.npmjs.org/failure/-/failure-1.1.1.tgz"
}
