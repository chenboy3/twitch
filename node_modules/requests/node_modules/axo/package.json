{
  "name": "axo",
  "version": "0.0.1",
  "description": "Return an ActiveXObject without mentioning it in the source",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "keywords": [
    "ActiveX",
    "ActiveXObject",
    "active-x",
    "active-x-object"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/unshiftio/axo.git"
  },
  "readme": "# AXO\n\n[![Build Status](https://travis-ci.org/unshiftio/axo.svg?branch=master)](https://travis-ci.org/unshiftio/axo)\n[![NPM version](https://badge.fury.io/js/axo.svg)](http://badge.fury.io/js/axo)\n[![Coverage Status](https://img.shields.io/coveralls/unshiftio/axo.svg)](https://coveralls.io/r/unshiftio/axo?branch=master)\n\nAXO stands for **A**ctive**XO**bject. And the sole purpose of this library is to\nreturn the `ActiveXObject` constructor from the environment it's loaded in.\nNormally you would just reference the constructor directly by simply mentioning\nthis constructor in your source file can [result in blocking of your\nfile](https://github.com/felixge/node-active-x-obfuscator#why).\n\nThere are 2 ways of tackling this issue:\n\n1. Use the [active-x-obfuscator](https://github.com/felixge/node-active-x-obfuscator)\n   and introduce another build step in your code.\n2. Use `AXO` and never mention it.\n\n## Installation\n\n```\nnpm install --save axo\n```\n\nThis module makes the assumption that it can be loaded in node.js/commonjs based\nenvironment and exports it self on the `module.exports`. So using browserify for\nthe code makes a lot of sense here.\n\n## Usage\n\n```js\nvar AXO = require('axo');\n\nnew AXO('htmlfile');\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/unshiftio/axo/issues"
  },
  "_id": "axo@0.0.1",
  "dist": {
    "shasum": "46818dd54f819be4793344da8e9bd6c4696acc11"
  },
  "_from": "axo@0.0.x",
  "_resolved": "https://registry.npmjs.org/axo/-/axo-0.0.1.tgz"
}
